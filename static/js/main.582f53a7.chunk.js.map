{"version":3,"sources":["ActivityLog/Overview.js","axios.js","ActivityLog/index.js","App.js","serviceWorker.js","index.js"],"names":["compose","withMemo","pushEventRepos","data","filter","type","map","repo","id","name","repoCount","countBy","Object","entries","count","sort","a","b","processedData","Box","pad","basis","console","table","List","primaryKey","secondaryKey","onClickItem","alert","instance","axios","create","baseURL","axiosRetry","retryDelay","exponentialDelay","retries","makeUseAxios","ActivityLog","resource","useState","setData","etag","setEtag","loading","setLoading","interval","setIntervalRef","fetchData","clearInterval","config","url","headers","then","newData","poll","log","setInterval","catch","error","response","status","useEffect","flex","Tabs","Tab","title","Overview","App","basepath","path","to","default","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.582f53a7.chunk.js","sourcesContent":["import { Box, List } from \"grommet\";\nimport { compose, withMemo } from \"@truefit/bach\";\nimport countBy from \"underscore/modules/countBy.js\";\n\nexport default compose(\n  withMemo(\n    \"processedData\",\n    ({ data }) => {\n      const pushEventRepos = data\n        .filter(({ type }) => type === \"PushEvent\")\n        .map(({ repo: { id, name } }) => ({ id, name }));\n      const repoCount = countBy(pushEventRepos, ({ name }) => name);\n      return Object.entries(repoCount)\n        .map(([name, count]) => ({ name, count }))\n        .sort((a, b) => {\n          if (a.count > b.count) return -1;\n          if (b.count > a.count) return 1;\n\n          return 0;\n        }); // .reduce((accumulator, { repo: { id } })=>, []);\n    },\n    [\"data\"]\n  )\n)(({ processedData }) => (\n  <Box pad=\"medium\" basis=\"small\">\n    {console.table(processedData)}\n    <List\n      primaryKey=\"count\"\n      secondaryKey=\"name\"\n      data={processedData}\n      onClickItem={({ name, count }) => {\n        alert(name + count);\n      }}\n    />\n  </Box>\n));\n","import axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport { makeUseAxios } from 'axios-hooks'\n\nconst instance = axios.create({ baseURL: \"https://api.github.com\" });\n\naxiosRetry(instance, { retryDelay: axiosRetry.exponentialDelay, retries: 5 });\n\nconst useAxios = makeUseAxios({\n    axios: instance\n});\n\nexport default instance;\nexport { useAxios };\n","import { Tabs, Tab, Box } from \"grommet\";\nimport Overview from \"./Overview\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"../axios\";\nimport BlockUi from \"react-block-ui\";\n\nconst ActivityLog = ({ type, resource }) => {\n  const [data, setData] = useState([]);\n  const [etag, setEtag] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [interval, setIntervalRef] = useState(null);\n  const fetchData = () => {\n    if (interval) clearInterval(interval);\n    let config = { url: \"/\" + type + \"s/\" + resource + \"/events\" };\n    if (etag) config = { ...config, headers: { \"If-None-Match\": etag } };\n    axios(config)\n      .then(\n        ({\n          data: newData,\n          headers: { etag, \"x-poll-interval\": poll = 60 },\n        }) => {\n          console.log({ newData, poll, etag });\n          setData([...newData, ...data]);\n          setEtag(etag);\n\n          setIntervalRef(setInterval(() => fetchData(), poll * 1000));\n          setLoading(false);\n        }\n      )\n      .catch((error) => {\n        if (error.response && error.response.status === 304)\n          console.log(\"Not modified!\");\n        else alert(\"Please refresh the page\");\n      });\n  };\n  useEffect(() => {\n    if (interval) clearInterval(interval);\n    fetchData();\n    // Disabling because this hook should only run if the input changes\n    // eslint-disable-next-line\n  }, [type, resource]);\n  return (\n    <Box pad=\"medium\" basis=\"medium\" flex>\n      <BlockUi loading={loading}>\n        <Tabs>\n          <Tab title=\"Top Repos\">\n            <Overview data={data} />\n          </Tab>\n        </Tabs>\n      </BlockUi>\n    </Box>\n  );\n};\n\nexport default ActivityLog;\n","import \"./App.css\";\nimport { Redirect, Router } from \"@reach/router\";\nimport ActivityLog from \"./ActivityLog\";\n\nfunction App() {\n  return (\n    <div>\n      Header with controls for input of ActivityLog variables\n      <Router basepath=\"/github-react-client\">\n        <ActivityLog path=\"/:type/:resource/:query\" />\n        <ActivityLog path=\"/:type/:resource/\" />\n        <Redirect to=\"/user/erasmuswill\" default  />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}