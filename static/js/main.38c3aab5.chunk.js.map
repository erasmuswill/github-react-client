{"version":3,"sources":["ActivityLog/Overview.js","axios.js","ActivityLog/ActivityItem.js","ActivityLog/Details.js","ActivityLog/Likes.js","ActivityLog/index.js","App.js","serviceWorker.js","index.js"],"names":["Overview","compose","withMemo","pushEventRepos","data","filter","type","map","repo","id","name","repoCount","countBy","Object","entries","count","sort","a","b","processedData","Box","fill","flex","justify","align","pad","style","maxWidth","List","primaryKey","secondaryKey","instance","axios","create","baseURL","axiosRetry","retryDelay","exponentialDelay","retries","makeUseAxios","TimeAgo","addDefaultLocale","en","ActivityItem","event","CreateEvent","payload","ref_type","ref","created_at","Text","ReactTimeAgo","date","Date","DeleteEvent","PullRequestEvent","action","pull_request","html_url","title","href","PushEvent","includes","split","slice","join","getMessageNode","Details","PouchDB","db","onClickItem","item","put","_id","Likes","withState","undefined","withEffect","setProcessedData","allDocs","include_docs","then","console","log","rows","doc","refreshFlag","startRefresh","length","remove","ActivityLog","resource","useState","setData","etag","setEtag","loading","setLoading","interval","setIntervalRef","setFilter","fuse","useMemo","Fuse","keys","search","fetchData","clearInterval","config","url","headers","newData","poll","setInterval","catch","error","response","status","alert","useEffect","basis","TextInput","placeholder","value","onChange","target","direction","alignItems","Avatar","size","margin","src","actor","avatar_url","Heading","display_login","Tabs","Tab","App","DefaultRoute","to","Grommet","basepath","path","default","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.38c3aab5.chunk.js","sourcesContent":["import { Box, List } from \"grommet\";\nimport { compose, withMemo } from \"@truefit/bach\";\nimport countBy from \"underscore/modules/countBy.js\";\n\nconst Overview = compose(\n  withMemo(\n    \"processedData\",\n    ({ data }) => {\n      const pushEventRepos = data\n        .filter(({ type }) => type === \"PushEvent\")\n        .map(({ repo: { id, name } }) => ({ id, name }));\n      const repoCount = countBy(pushEventRepos, ({ name }) => name);\n      return Object.entries(repoCount)\n        .map(([name, count]) => ({ name, count }))\n        .sort((a, b) => {\n          if (a.count > b.count) return -1;\n          if (b.count > a.count) return 1;\n\n          return 0;\n        }); // .reduce((accumulator, { repo: { id } })=>, []);\n    },\n    [\"data\"]\n  )\n)(({ processedData }) => (\n  <Box fill flex justify=\"center\" align=\"center\">\n    <Box pad=\"medium\" style={{ maxWidth: \"800px\" }}>\n      <List primaryKey=\"count\" secondaryKey=\"name\" data={processedData} />\n    </Box>\n  </Box>\n));\n\nexport default Overview\n","import axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport { makeUseAxios } from 'axios-hooks'\n\nconst instance = axios.create({\n  baseURL: \"https://api.github.com\",\n  // Add your username and access token here:\n  // auth: {\n  //   username: \"erasmuswill\",\n  //   password: \"xxx\",\n  // },\n});\n\naxiosRetry(instance, { retryDelay: axiosRetry.exponentialDelay, retries: 5 });\n\nconst useAxios = makeUseAxios({\n    axios: instance\n});\n\nexport default instance;\nexport { useAxios };\n","import { Text } from \"grommet\";\nimport ReactTimeAgo from \"react-time-ago\";\nimport TimeAgo from \"javascript-time-ago\";\n\nimport en from \"javascript-time-ago/locale/en\";\nTimeAgo.addDefaultLocale(en);\n\nconst getMessageNode = (event) =>\n  ((\n    {\n      // CommitCommentEvent: (type) => <Text>{JSON.stringify(type)}</Text>,\n      CreateEvent: ({\n        payload: { ref_type, ref },\n        repo: { name },\n        created_at,\n      }) => (\n        <Text>\n          created {ref_type} {ref} at {name}{\" \"}\n          <ReactTimeAgo date={new Date(created_at)} />\n        </Text>\n      ),\n      DeleteEvent: ({\n        payload: { ref_type, ref },\n        repo: { name },\n        created_at,\n      }) => (\n        <Text>\n          deleted {ref_type} {ref} at {name}{\" \"}\n          <ReactTimeAgo date={new Date(created_at)} />\n        </Text>\n      ),\n      // ForkEvent: (type) => <Text>{JSON.stringify(type)}</Text>,\n      // GollumEvent: (type) => <Text>{JSON.stringify(type)}</Text>,\n      // IssueCommentEvent: (type) => <Text>{JSON.stringify(type)}</Text>,\n      // IssuesEvent: (type) => <Text>{JSON.stringify(type)}</Text>,\n      // MemberEvent: (type) => <Text>{JSON.stringify(type)}</Text>,\n      // PublicEvent: (type) => <Text>{JSON.stringify(type)}</Text>,\n      PullRequestEvent: ({\n        payload: {\n          action,\n          pull_request: { html_url, title },\n        },\n        created_at,\n      }) => (\n        <Text>\n          {action} pull request: <a href={html_url}>{title}</a>{\" \"}\n          <ReactTimeAgo date={new Date(created_at)} />\n        </Text>\n      ),\n      // PullRequestReviewCommentEvent: (type) => (\n      //   <Text>{JSON.stringify(type)}</Text>\n      // ),\n      PushEvent: ({ payload: { ref = \"\" }, repo: { name }, created_at }) => (\n        <Text>\n          pushed to{\" \"}\n          {ref.includes(\"refs/heads/\") && ref.split(\"/\").slice(2).join(\"/\")}{\" \"}\n          {name} <ReactTimeAgo date={new Date(created_at)} />\n        </Text>\n      ),\n      // ReleaseEvent: (type) => <Text>{JSON.stringify(type)}</Text>,\n      // SponsorshipEvent: (type) => <Text>{JSON.stringify(type)}</Text>,\n      // WatchEvent: (type) => <Text>{JSON.stringify(type)}</Text>,\n    }[event.type] || (() => null)\n  )(event));\n\nconst ActivityItem = ({ event }) => {\n  return getMessageNode(event);\n};\n\nexport default ActivityItem;\n","import { compose, withMemo } from \"@truefit/bach\";\nimport ActivityItem from \"./ActivityItem\";\nimport PouchDB from \"pouchdb\";\nimport { Box, List } from \"grommet\";\n\nconst Details = compose(\n  withMemo(\"processedData\", ({ data }) => [...data], [\"data\"]),\n  withMemo(\"db\", () => new PouchDB(\"read-later\"), [])\n)(({ processedData = [], db }) => (\n  <Box fill flex justify=\"center\" align=\"center\">\n    <Box pad=\"medium\" style={{ maxWidth: \"1000px\" }}>\n      <List\n        primaryKey=\"type\"\n        data={processedData}\n        action={(event) => <ActivityItem event={event} />}\n        onClickItem={({ item }) => {\n          db.put({ ...item, _id: item.id });\n        }}\n      />\n    </Box>\n  </Box>\n));\n\nexport default Details;\n","import { compose, withEffect, withMemo, withState } from \"@truefit/bach\";\nimport ActivityItem from \"./ActivityItem\";\nimport PouchDB from \"pouchdb\";\nimport { Box, List, Text } from \"grommet\";\n\nconst Likes = compose(\n  withMemo(\"db\", () => new PouchDB(\"read-later\"), []),\n  withState(\"processedData\", \"setProcessedData\", undefined),\n  withState(\"refreshFlag\", \"startRefresh\", false),\n  withEffect(\n    ({ db, setProcessedData }) => {\n      if (db)\n        db.allDocs({ include_docs: true }).then((data) => {\n          console.log(data);\n          setProcessedData(data.rows.map(({ doc }) => doc));\n        });\n    },\n    [\"db\", \"refreshFlag\"]\n  )\n)(({ processedData = [], setProcessedData, db, refreshFlag, startRefresh }) => (\n  <Box fill flex justify=\"center\" align=\"center\">\n    <Box pad=\"medium\" style={{ maxWidth: \"1000px\" }}>\n      {processedData && processedData.length ? (\n        <List\n          primaryKey=\"type\"\n          data={processedData}\n          action={(event) => <ActivityItem event={event} />}\n          onClickItem={({ item }) => {\n            db.remove(item);\n            startRefresh(!refreshFlag);\n          }}\n        />\n      ) : (\n        <Text>Go like some items :)</Text>\n      )}\n    </Box>\n  </Box>\n));\n\nexport default Likes;\n","import { Avatar, Tabs, Tab, Box, Heading, Text, TextInput } from \"grommet\";\nimport Overview from \"./Overview\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport axios from \"../axios\";\nimport Details from \"./Details\";\nimport Fuse from \"fuse.js\";\nimport Likes from \"./Likes\";\n\nconst ActivityLog = ({ type, resource }) => {\n  const [data, setData] = useState([]);\n  const [etag, setEtag] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [interval, setIntervalRef] = useState(null);\n  const [filter, setFilter] = useState(\"\");\n  const fuse = useMemo(\n    () =>\n      data.length\n        ? new Fuse(data, {\n            keys: [\"id\", \"type\", \"repo.name\"],\n          })\n        : { search: () => [] },\n    [data]\n  );\n  const processedData = useMemo(() => {\n    if (!filter) return data;\n    return fuse.search(filter).map(({ item }) => item);\n  }, [data, fuse, filter]);\n  const fetchData = () => {\n    if (interval) clearInterval(interval);\n    let config = { url: \"/\" + type + \"s/\" + resource + \"/events\" };\n    if (etag) config = { ...config, headers: { \"If-None-Match\": etag } };\n    axios(config)\n      .then(\n        ({\n          data: newData,\n          headers: { etag, \"x-poll-interval\": poll = 60 },\n        }) => {\n          console.log({ newData, poll, etag });\n          setData([...newData, ...data]);\n          setEtag(etag);\n\n          setIntervalRef(setInterval(() => fetchData(), poll * 1000));\n          setLoading(false);\n        }\n      )\n      .catch((error) => {\n        if (error.response && error.response.status === 304)\n          console.log(\"Not modified!\");\n        else {\n          clearInterval(interval);\n          alert(\"Please refresh the page\");\n        }\n      });\n  };\n  useEffect(() => {\n    if (interval) clearInterval(interval);\n    fetchData();\n    // Disabling because this hook should only run if the input changes\n    // eslint-disable-next-line\n  }, [type, resource]);\n  return (\n    <Box pad=\"medium\" basis=\"medium\">\n      <Box fill flex justify=\"center\" align=\"center\">\n        <Box pad=\"medium\">\n          <TextInput\n            placeholder=\"search\"\n            value={filter}\n            onChange={({ target: { value } }) => setFilter(value)}\n          />\n        </Box>\n      </Box>\n      {data.length && !loading ? (\n        <>\n          <Box direction=\"row\" justify=\"center\" alignItems=\"center\" flex>\n            <Avatar\n              size=\"large\"\n              margin=\"small\"\n              src={data[0].actor.avatar_url}\n            ></Avatar>\n            <Heading margin=\"small\">{data[0].actor.display_login}</Heading>\n          </Box>\n          <Tabs>\n            <Tab title=\"Top Repos\">\n              <Overview data={processedData} />\n            </Tab>\n            <Tab title=\"Details\">\n              <Details data={processedData} />\n            </Tab>\n            <Tab title=\"Likes\">\n              <Likes />\n            </Tab>\n          </Tabs>\n        </>\n      ) : (\n        <Box fill flex justify=\"center\" align=\"center\">\n          <Box pad=\"medium\" style={{ maxWidth: \"800px\" }}>\n            <Text>No content (yet)</Text>\n          </Box>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default ActivityLog;\n","import \"./App.css\";\nimport { Redirect, Router } from \"@reach/router\";\nimport ActivityLog from \"./ActivityLog\";\nimport { Grommet, Text, Box } from \"grommet\";\n\nfunction App() {\n  const DefaultRoute = () => (\n    <Redirect to=\"/github-react-client/user/erasmuswill\" />\n  );\n\n  return (\n    <Grommet>\n      <Box fill flex justify=\"center\" align=\"center\">\n        <Box pad=\"medium\" style={{ maxWidth: \"800px\" }}>\n          <Text>Click items to save and unsave for later</Text>\n        </Box>\n      </Box>\n      <Router basepath=\"/github-react-client\">\n        <ActivityLog path=\"/:type/:resource/\" />\n        <DefaultRoute default />\n      </Router>\n    </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}